;(function($){
    jUdey.fn.canvasArea = function(options) {
        var options = jUdey.extend({
            input_selector : '#map',
            mainimage_selector : '#group-image img'
        }, options);

        var canvas = jUdey(this);
        var input = jUdey(options.input_selector);
        var mainimage = jUdey(options.mainimage_selector);
        var context = canvas.get(0).getContext('2d');
        var points = [];
        
        var init = function(index, input, options) {
            jUdey(document).ready( function() {
                mainimage.load( function(){
                    importpoints();
                    //redraw();
                });
                canvas.bind('mousedown', mousedown);
                canvas.bind('contextmenu', rightclick);
                canvas.bind('mouseup', stopdrag);
                mainimage.resize( function(){
                    resizecanvas();
                    importpoints();
                    redraw();
                });
            });
        }
        
        var redraw = function() {
            context.canvas.width = context.canvas.width;
console.log(points);
            if (points.length < 2) {
                return false;
            }
            context.globalCompositeOperation = 'destination-over';
            context.fillStyle = 'rgb(255,255,255)'
            context.strokeStyle = 'rgb(255,20,20)';
            context.lineWidth = 1;

            context.beginPath();
            context.moveTo(points[0], points[1]);
            for (var i = 0; i < points.length; i+=2) {
                context.fillRect(points[i]-2, points[i+1]-2, 4, 4);
                context.strokeRect(points[i]-2, points[i+1]-2, 4, 4);
                if (points.length > 2 && i > 1) {
                    context.lineTo(points[i], points[i+1]);
                }
            }
            context.closePath();
            context.fillStyle = 'rgba(255,0,0,0.3)';
            context.fill();
            context.stroke();

            exportpoints();
        };        
        
        var mousedown = function(e) {
            var x, y, dis, lineDis, insertAt = points.length;

            if (e.which === 3) {
                return false;
            }

            e.preventDefault();
            if(!e.offsetX) {
                e.offsetX = (e.pageX - $(e.target).offset().left);
                e.offsetY = (e.pageY - $(e.target).offset().top);
            }
            x = e.offsetX; y = e.offsetY;

            for (var i = 0; i < points.length; i+=2) {
                dis = Math.sqrt(Math.pow(x - points[i], 2) + Math.pow(y - points[i+1], 2));
                if ( dis < 6 ) {
                    activePoint = i;
                    $(this).bind('mousemove', move);
                    return false;
                }
            }

            for (var i = 0; i < points.length; i+=2) {
                if (i > 1) {
                    lineDis = dotLineLength(
                        x, y,
                        points[i], points[i+1],
                        points[i-2], points[i-1],
                        true
                    );
                    if (lineDis < 6) {
                        insertAt = i;
                    }
                }
            }

            points.splice(insertAt, 0, Math.round(x), Math.round(y));
            activePoint = insertAt;
            $(this).bind('mousemove', move);

            redraw();
            exportpoints();

            return false;
        };
        
        var stopdrag = function() {
            jUdey(this).unbind('mousemove');
            exportpoints();
            //activePoint = null;
        };
        
        var move = function(e) {
            if(!e.offsetX) {
                e.offsetX = (e.pageX - $(e.target).offset().left);
                e.offsetY = (e.pageY - $(e.target).offset().top);
            }
            points[activePoint] = Math.round(e.offsetX);
            points[activePoint+1] = Math.round(e.offsetY);
            redraw();
        };
        
        var dotLineLength = function(x, y, x0, y0, x1, y1, o) {
            function lineLength(x, y, x0, y0){
                return Math.sqrt((x -= x0) * x + (y -= y0) * y);
            }
            if(o && !(o = function(x, y, x0, y0, x1, y1){
                if(!(x1 - x0)) return {x: x0, y: y};
                else if(!(y1 - y0)) return {x: x, y: y0};
                var left, tg = -1 / ((y1 - y0) / (x1 - x0));
                return {x: left = (x1 * (x * tg - y + y0) + x0 * (x * - tg + y - y1)) / (tg * (x1 - x0) + y0 - y1), y: tg * left - tg * x + y};
            }(x, y, x0, y0, x1, y1), o.x >= Math.min(x0, x1) && o.x <= Math.max(x0, x1) && o.y >= Math.min(y0, y1) && o.y <= Math.max(y0, y1))){
                var l1 = lineLength(x, y, x0, y0), l2 = lineLength(x, y, x1, y1);
                return l1 > l2 ? l2 : l1;
            }
            else {
                var a = y0 - y1, b = x1 - x0, c = x0 * y1 - y0 * x1;
                return Math.abs(a * x + b * y + c) / Math.sqrt(a * a + b * b);
            }
        };
                
        var rightclick = function(e) {
            e.preventDefault();
            if(!e.offsetX) {
                e.offsetX = (e.pageX - $(e.target).offset().left);
                e.offsetY = (e.pageY - $(e.target).offset().top);
            }
            var x = e.offsetX, y = e.offsetY;
            for (var i = 0; i < points.length; i+=2) {
                dis = Math.sqrt(Math.pow(x - points[i], 2) + Math.pow(y - points[i+1], 2));
                if ( dis < 6 ) {
                    points.splice(i, 2);
                    redraw();
                    exportpoints();
                    return false;
                }
            }
            return false;
        };
        
        var resizecanvas = function() {
            canvas.attr('width', mainimage.width());
            canvas.attr('height', mainimage.height());
        };
        
        var exportpoints = function() {
            //$(input).val(points.join(','));
            points_perc = [];
            points.each( function(val, index){
                if (index%2) {
                    points_perc.push(val/mainimage.height());
                } else {
                    points_perc.push(val/mainimage.width());
                }
            });
            input.attr('value', points_perc.join());
        };
        
        var importpoints = function() {
            tmp = input.val().split(',');
            points = [];
            tmp.each( function(val, index){
                if (!isNaN(parseInt(val))) {
                    if (index%2) {
                        points.push(parseInt(val*mainimage.height()));
                    } else {
                        points.push(parseInt(val*mainimage.width()));
                    }
                } else {
                    points = []; return;
                }
            });
        };
        
        init();
    };
})(jUdey);


/*
 * jQuery resize event - v1.1 - 3/14/2010
 * http://benalman.com/projects/jquery-resize-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
(function($,h,c){var a=$([]),e=$.resize=$.extend($.resize,{}),i,k="setTimeout",j="resize",d=j+"-special-event",b="delay",f="throttleWindow";e[b]=250;e[f]=true;$.event.special[j]={setup:function(){if(!e[f]&&this[k]){return false}var l=$(this);a=a.add(l);$.data(this,d,{w:l.width(),h:l.height()});if(a.length===1){g()}},teardown:function(){if(!e[f]&&this[k]){return false}var l=$(this);a=a.not(l);l.removeData(d);if(!a.length){clearTimeout(i)}},add:function(l){if(!e[f]&&this[k]){return false}var n;function m(s,o,p){var q=$(this),r=$.data(this,d);r.w=o!==c?o:q.width();r.h=p!==c?p:q.height();n.apply(this,arguments)}if($.isFunction(l)){n=l;return m}else{n=l.handler;l.handler=m}}};function g(){i=h[k](function(){a.each(function(){var n=$(this),m=n.width(),l=n.height(),o=$.data(this,d);if(m!==o.w||l!==o.h){n.trigger(j,[o.w=m,o.h=l])}});g()},e[b])}})(jQuery,this);
